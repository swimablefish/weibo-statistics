l
exit
(def a ([:c 101] [:d 102])
)
(def a ([:c 101] [:d 102]))
(def a [{:visible {:type 0, :list_id 0}, :text 【Photoshop快捷键大全】快捷键很多，别担心记不住，多多练习，你也可以成为熟练的PS大师！百度云教程地址：http://t.cn/8kU0Fcg, :reposts_count 2, :pic_urls [], :idstr 3650422063285250, :mlevel 0, :in_reply_to_screen_name , :retweeted_status {:visible {:type 0, :list_id 0}, :text 【Photoshop快捷键大全】快捷键很多，别担心记不住，多多练习，你也可以成为熟练的PS大师！教程地址：http://t.cn/8kU0Fcg, :bmiddle_pic http://ww4.sinaimg.cn/bmiddle/988f84fcjw1eb0zw5xukfj20c81ls7hk.jpg, :reposts_count 26, :pic_urls [{:thumbnail_pic http://ww4.sinaimg.cn/thumbnail/988f84fcjw1eb0zw5xukfj20c81ls7hk.jpg}], :idstr 3649704589991333, :mlevel 0, :thumbnail_pic http://ww4.sinaimg.cn/thumbnail/988f84fcjw1eb0zw5xukfj20c81ls7hk.jpg, :in_reply_to_screen_name , :truncated false, :attitudes_count 1, :created_at Thu Nov 28 20:14:04 +0800 2013, :geo nil, :original_pic http://ww4.sinaimg.cn/large/988f84fcjw1eb0zw5xukfj20c81ls7hk.jpg, :comments_count 6, :in_reply_to_status_id , :user {:gender m, :mbrank 0, :allow_all_act_msg true, :ptype 0, :following true, :favourites_count 19, :domain baiduwangpan, :online_status 0, :class 1, :name 百度网盘官方微博, :idstr 2559542524, :location 北京 海淀区, :follow_me false, :weihao , :statuses_count 2031, :province 11, :profile_url baiduwangpan, :followers_count 130230, :friends_count 284, :city 8, :created_at Fri Nov 25 18:40:25 +0800 2011, :bi_followers_count 107, :remark , :lang zh-cn, :url , :avatar_large http://tp1.sinaimg.cn/2559542524/180/5661998439/1, :verified_type 2, :geo_enabled true, :star 0, :allow_all_comment true, :profile_image_url http://tp1.sinaimg.cn/2559542524/50/5661998439/1, :verified true, :avatar_hd http://tp1.sinaimg.cn/2559542524/180/5661998439/1, :mbtype 0, :id 2559542524, :verified_reason 百度网盘官方微博, :block_word 0, :description 百度网盘是百度推出的一项云存储服务，首次注册即有机会获得15GB的空间。百度网盘诚邀合作伙伴，投稿请私信哦！ ..., :screen_name 百度网盘官方微博}, :mid 3649704589991333, :favorited false, :source <a href="http://e.weibo.com/2559542524/app_378826990" rel="nofollow">百度网盘官方微博-皮</a>, :id 3649704589991333, :in_reply_to_user_id }, :truncated false, :attitudes_count 0, :created_at Sat Nov 30 19:45:02 +0800 2013, :geo nil, :comments_count 0, :in_reply_to_status_id , :user {:gender m, :mbrank 0, :allow_all_act_msg true, :ptype 0, :following true, :favourites_count 7, :domain baiduyun1, :online_status 1, :class 1, :name 百度云, :idstr 2952668222, :location 北京, :follow_me false, :weihao , :statuses_count 870, :province 11, :profile_url baiduyun1, :followers_count 862831, :friends_count 96, :city 1000, :created_at Thu Aug 16 14:36:18 +0800 2012, :bi_followers_count 57, :remark , :lang zh-cn, :url , :avatar_large http://tp3.sinaimg.cn/2952668222/180/5661998739/1, :verified_type 2, :geo_enabled true, :star 0, :allow_all_comment true, :profile_image_url http://tp3.sinaimg.cn/2952668222/50/5661998739/1, :verified true, :avatar_hd http://tp3.sinaimg.cn/2952668222/180/5661998739/1, :mbtype 0, :id 2952668222, :verified_reason 百度云官方微博, :block_word 0, :description 百度云是百度公司推出的一款云服务产品。通过百度云，您可以将照片、文档、音乐、通讯录等数据在各类设备中使用和管理...资源投稿请私信！, :screen_name 百度云}, :mid 3650422063285250, :favorited false, :source <a href="http://e.weibo.com/2952668222/app_378826990" rel="nofollow">百度云-皮皮时光机企</a>, :id 3650422063285250, :in_reply_to_user_id }])
wuiy
quit
(doc in)
(name "dfd")
(symbol "dfd")
(symbol ":dfd")
(type (symbol ":dfd"))
({} "a")
(assoc {} "a" 1)
(keyword "a")
(doc get)
(def a (1 2 3))
(def a '(1 2 3))
(get 1 a)
(get a 1)
(nth a 0)
(use 'clj-time.format)
(clj-time.format/parse "Sat Nov 30 20:06:43 +0800 2013")
(show-formatters)
(parse (formatter \"a b d H\" "Sat Nov 30 20:06:43 +0800 2013")
)
(parse (formatters :rfc822) "Sat Nov 30 20:06:43 +0800 2013")
(parse (formatter \"EEE MMM d HH:mm:ss Z yyyy\"） "Sat Nov 30 20:06:43 +0800 2013")
）
））
dkjf
)
(parse (formatter \"EEE MMM d HH:mm:ss Z yyyy\"） "Sat Nov 30 20:06:43 +0800 2013")
)
(parse (formatter \"EEE MMM d HH:mm:ss Z yyyy\") "Sat Nov 30 20:06:43 +0800 2013")
(parse (formatter \"ddd MMM dd HH:mm:ss zzz yyyy\") "Sat Nov 30 20:06:43 +0800 2013")
(parse (formatter \"D M dd HH:mm:ss zzz yyyy\") "Sat Nov 30 20:06:43 +0800 2013")
(unparse (formatter \"HH\") (now))
(unparse (formatter "HH") (now))
(now)
(unparse (formatter "HH") (date-time 1986 10 14 4 3 27 456))
(unparse (formatter \"HH\") (date-time 1986 10 14 4 3 27 456))
(date-time 1986 10 14 4 3 27 456)
(use 'clj-time.core)
(unparse (formatter \"HH\") (date-time 1986 10 14 4 3 27 456))
(date-time 1986 10 14 4 3 27 456)
(unparse (formatter "HH") (date-time 1986 10 14 4 3 27 456))
(parse (formatter \"D M dd HH:mm:ss zzz yyyy\") "Sat Nov 30 20:06:43 +0800 2013")
(unparse (formatter "HH") (date-time 1986 10 14 4 3 27 456))
(parse (formatter \"D M dd HH:mm:ss zzz yyyy\") "Sat Nov 30 20:06:43 +0800 2013")
(unparse (formatter "HH") (date-time 1986 10 14 4 3 27 456))
(unparse (formatter "a") (date-time 1986 10 14 4 3 27 456))
(unparse (formatter "b") (date-time 1986 10 14 4 3 27 456))
(unparse (formatter "D") (date-time 1986 10 14 4 3 27 456))
(unparse (formatter "w") (date-time 1986 10 14 4 3 27 456))
(unparse (formatter "W") (date-time 1986 10 14 4 3 27 456))
(unparse (formatter "ddd") (date-time 1986 10 14 4 3 27 456))
(unparse (formatter "HH:mm:ss zzz yyyy") (date-time 1986 10 14 4 3 27 456))
(unparse (formatter "HH:mm:ss Z yyyy") (date-time 1986 10 14 4 3 27 456))
(unparse (formatter "m d HH:mm:ss Z yyyy") (date-time 1986 10 14 4 3 27 456))
(unparse (formatter "M d HH:mm:ss Z yyyy") (date-time 1986 10 14 4 3 27 456))
(unparse (formatter "MM dd HH:mm:ss Z yyyy") (date-time 1986 10 14 4 3 27 456))
(unparse (formatter "E MM dd HH:mm:ss Z yyyy") (date-time 1986 10 14 4 3 27 456))
(unparse (formatter “e MM dd HH:mm:ss Z yyyy") (date-time 1986 10 14 4 3 27 456))
)
))
"
)
(unparse (formatter "E MM dd HH:mm:ss Z yyyy") (date-time 1986 10 14 4 3 27 456))
(unparse (formatter "e MM dd HH:mm:ss Z yyyy") (date-time 1986 10 14 4 3 27 456))
(unparse (formatter "EE MM dd HH:mm:ss Z yyyy") (date-time 1986 10 14 4 3 27 456))
(parse (formatter \"D M dd HH:mm:ss zzz yyyy\") "Sat Nov 30 20:06:43 +0800 2013")
(parse (formatter "EE MM dd HH:mm:ss Z yyyy") "Sat Nov 30 20:06:43 +0800 2013")
(parse (formatter "E M dd HH:mm:ss Z yyyy") "Sat Nov 30 20:06:43 +0800 2013")
(parse (formatter "HH:mm:ss Z yyyy") "20:06:43 +0800 2013")
(show-formatters)
(parse (formatter "E M dd HH:mm:ss Z yyyy") "Sat Nov 30 20:06:43 +0800 2013")
(parse (formatter "MM dd HH:mm:ss Z yyyy") "Sat Nov 30 20:06:43 +0800 2013")
(parse (formatter "HH:mm:ss Z yyyy") "20:06:43 +0800 2013")
(parse (formatter " dd HH:mm:ss Z yyyy") " 30 20:06:43 +0800 2013")
(parse (formatter " MM dd HH:mm:ss Z yyyy") " Nov 30 20:06:43 +0800 2013")
(parse (formatter " M dd HH:mm:ss Z yyyy") " Nov 30 20:06:43 +0800 2013")
(parse (formatter " b dd HH:mm:ss Z yyyy") " Nov 30 20:06:43 +0800 2013")
(parse (formatter " h dd HH:mm:ss Z yyyy") " Nov 30 20:06:43 +0800 2013")
(parse (formatter " hh dd HH:mm:ss Z yyyy") " Nov 30 20:06:43 +0800 2013")
(parse (formatter "a b dd HH:mm:ss Z yyyy") "Sat Nov 30 20:06:43 +0800 2013")
(parse (formatter "a dd HH:mm:ss Z yyyy") "Sat 30 20:06:43 +0800 2013")
(parse (formatter "aaa dd HH:mm:ss Z yyyy") "Sat 30 20:06:43 +0800 2013")
(parse (formatter "A dd HH:mm:ss Z yyyy") "Sat 30 20:06:43 +0800 2013")
(import java.util.Date)
(show-formatters)
(use 'clj-time.core)
(use 'clj-time.format)
(show formatters)
(show-formatters)
(import java.util.Date)
(import java.text.SimpleDateFormat)
(def format (SimpleDateFormat. "a h dd HH:mm:ss Z yyyy"))
(def formats (SimpleDateFormat. "a h dd HH:mm:ss Z yyyy"))
(.parse formats "Sat May 31 17:46:55 +0800 2011")
(def formats (SimpleDateFormat. "M dd HH:mm:ss Z yyyy"))
(.parse formats "May 31 17:46:55 +0800 2011")
(def formats (SimpleDateFormat. "MM dd HH:mm:ss Z yyyy"))
(.parse formats "m 31 17:46:55 +0800 2011")
(.parse formats "M 31 17:46:55 +0800 2011")
(.parse formats "MMM 31 17:46:55 +0800 2011")
(.parse formats " 31 17:46:55 +0800 2011")
(def formats (SimpleDateFormat. "MMM dd HH:mm:ss Z yyyy"))
(.parse formats "May 31 17:46:55 +0800 2011")
(.format formats (Date .))
(def formats (SimpleDateFormat. "dd HH:mm:ss Z yyyy"))
(.format formats (Date.))
(def formats (SimpleDateFormat. "M dd HH:mm:ss Z yyyy"))
(.format formats (Date.))
(def formats (SimpleDateFormat. "MM dd HH:mm:ss Z yyyy"))
(.format formats (Date.))
(def formats (SimpleDateFormat. "MMM dd HH:mm:ss Z yyyy"))
(.format formats (Date.))
(def formats (SimpleDateFormat. "EEE MMM dd HH:mm:ss Z yyyy"))
(.format formats (Date.))
(def formats (SimpleDateFormat. "EEE MMM dd HH:mm:ss Z yyyy" Local.ENGLISH))
(import java.util.Local)
(import java.util.Locale)
(def formats (SimpleDateFormat. "EEE MMM dd HH:mm:ss Z yyyy" Locale.ENGLISH))
(def formats (SimpleDateFormat. "EEE MMM dd HH:mm:ss Z yyyy" (Locale. "en" "US"))
)
(.format formats (Date.))
(.parse formats "Tue May 31 17:46:55 +0800 2011")
(.format formats (Date.))
(with-local )
(source with-locale)
(def custom-formatter (formatter "EEE MMM dd HH:mm:ss Z yyyy"))
(parse (with-locale custom-formatter (Locale. "en" "US")) "Sun Dec 01 00:41:40 +0800 2013")
(doc ns)
(take 100 [1, 3, 5])
(use 'weibo-statistics.weibo)
(take 100 [1, 3, 5])
(doc in)
(doc ns)
(with-
(use '[clojure.tools.cli :only [cli]])
(cli args
     ["-p" "--port" "Listen on this port" :parse-fn #(Integer. %)
      :assoc-fn (fn [previous key val]
                   (assoc previous key
                          (if-let [oldval (get previous key)]
                            (merge oldval val)
                            (hash-set val))))] 
     ["-h" "--host" "The hostname" :default "localhost"]
     ["-v" "--[no-]verbose" :default true]
     ["-l" "--log-directory" :default "/some/path"])
(use 'clojure.java.io)
(file-seq (java.io.File. "./data")
)
(use 'clojure.java.io)
(first (file-seq (java.io.File. "./data"))
)
(.getPath (first (file-seq (java.io.File. "./data"))))
(use 'clojure.java.io)
(io.delete-file "df")
(ns weibo-statistics.analyser)
(gen-chart "test" {"a" 1 "b" 2 "d 4"})
(gen-chart "test" {"a" 1 "b" 2 "d" 4})
(ns weibo-statistics.analyser)
(gen-chart "test" {"a" 1 "b" 2 "d" 4})
(ns weibo-statistics.analyser)
(gen-chart "test" {"a" 1 "b" 2 "d" 4})
*ns*
(ns weibo-statistics.analyser)
(gen-chart "test" {"a" 1 "b" 2 "d" 4})
